// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestEDM;

namespace TestEDM.Migrations
{
    [DbContext(typeof(TestDBContext))]
    [Migration("20210211183449_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BackTest.Models.Account", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AcountHolderid")
                        .HasColumnType("int");

                    b.Property<double>("balance")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("AcountHolderid");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BackTest.Models.AssetTransaction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("accountid")
                        .HasColumnType("int");

                    b.Property<bool>("isPurchase")
                        .HasColumnType("bit");

                    b.Property<int>("sharesAmount")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("accountid");

                    b.ToTable("AssetTransactions");
                });

            modelBuilder.Entity("BackTest.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackTest.Models.Account", b =>
                {
                    b.HasOne("BackTest.Models.User", "AcountHolder")
                        .WithMany()
                        .HasForeignKey("AcountHolderid");

                    b.Navigation("AcountHolder");
                });

            modelBuilder.Entity("BackTest.Models.AssetTransaction", b =>
                {
                    b.HasOne("BackTest.Models.Account", "account")
                        .WithMany("AssetTransactions")
                        .HasForeignKey("accountid");

                    b.OwnsOne("BackTest.Models.Stock", "stock", b1 =>
                        {
                            b1.Property<int>("AssetTransactionid")
                                .HasColumnType("int");

                            b1.Property<double>("pricePerShare")
                                .HasColumnType("float");

                            b1.Property<string>("symbol")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AssetTransactionid");

                            b1.ToTable("Stock");

                            b1.WithOwner()
                                .HasForeignKey("AssetTransactionid");
                        });

                    b.Navigation("account");

                    b.Navigation("stock");
                });

            modelBuilder.Entity("BackTest.Models.Account", b =>
                {
                    b.Navigation("AssetTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
